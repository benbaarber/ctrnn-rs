import numpy as np
from numpy.typing import NDArray

class CTRNN:
    taus: NDArray[np.float64]
    weights: NDArray[np.float64]
    biases: NDArray[np.float64]
    gains: NDArray[np.float64]
    states: NDArray[np.float64]
    outputs: NDArray[np.float64]
    def __new__(
        cls, input_size: int, hidden_size: int, output_size: int, step_size: float = 0.1
    ) -> CTRNN: ...
    def euler_step(self, inputs: NDArray[np.float64]) -> NDArray[np.float64]: ...
    def output(self) -> NDArray[np.float64]: ...
    def to_file(self, filename: str) -> None: ...
    @classmethod
    def from_file(cls, filename: str) -> CTRNN: ...
    def burn_in(self, steps: int) -> None: ...
    def reset(self) -> None: ...
    def __getstate__(self) -> bytes: ...
    def __setstate__(self, state: bytes) -> None: ...
